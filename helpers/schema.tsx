/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface ContactSubmissions {
  createdAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  message: string;
  name: string;
  phone: string | null;
}

export interface DevelopmentModels {
  bathrooms: number | null;
  bedrooms: number | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  developmentId: number | null;
  features: Generated<Json | null>;
  id: Generated<number>;
  name: string;
  price: Numeric;
  sizeM2: Numeric | null;
}

export interface Developments {
  createdAt: Generated<Timestamp | null>;
  description: string;
  features: Generated<Json | null>;
  galleryImages: Generated<Json | null>;
  id: Generated<number>;
  imageUrl: string | null;
  location: string;
  name: string;
  startingPrice: Numeric | null;
  tagline: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  contactSubmissions: ContactSubmissions;
  developmentModels: DevelopmentModels;
  developments: Developments;
}




// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.